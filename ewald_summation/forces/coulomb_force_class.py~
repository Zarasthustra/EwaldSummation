class CoulombForce:
    def __init__(self, simuconfig):
        self.n_dim = simuconfig.n_dim
        self.vac_per = simuconfig.vac_per
        self.l_box =  simuconfig.l_box[0] #assume that box is quadradic
        self.coulomb_trunc_err = simuconfig.coulomb_trunc_err
        self.reciprokal_cutoff = simuconfig.reciprokal_cutoff
    real_cutoff = l_box / 2
    p = -np.log(coulomb_trunc_err)
    variance = real_cutoff/np.sqrt(2 * p)
    k_space_cutoff = 2*p/coulomb_trunc_err

    def real_space_coulomb_force(self, x):
        prefactor = 2 * variance / (np.sqrt(np.pi))
        force = np.zeros([N_particles,dimension])
        self_interaction_therm = 4 * np.pi / 3 * box_length ** (1/dimension) * np.sum(charge_vector*x, axis=0) # possible other definition for dim neq 3
        for i in range(N_particles):
            dist_and_r_ij = get_distances(x,i)
            r_ij = dist_and_r_ij[:,1:]
            dist = dist_and_r_ij[:,0]
            charge = charge_vector[i]
            charges = np.delete(charge_vector, i)
            array = 1 / (dist**3) * charges * ( prefactor * dist * np.exp(-variance*dist**2) + erfc(variance * dist))  # possible other definition for dim neq 3
            array = r_ij * array[:, np.newaxis]
            force[i] = charge  * np.sum(array, axis=0) - charge * self_interaction_therm
        return force
        
    