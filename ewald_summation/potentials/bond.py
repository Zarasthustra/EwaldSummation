import numpy as np
from numba import njit
import math

@njit
def bond_pot(bond_info, dvs):
    """Method to calculate the potential of a chemical bond.
    
    Input:
    bond_info: an entry from phys_world.molecule_types.bonds
               (bond_type, index of par1, index of par2, EqnLen r_0, Bond k,
                Morse D, Morse rho) (bond_type = 0 (harmonic) or 1 (Morse))
    dvs: a tuple:
         dvs[0]: distance vectors for the molecule.
         dvs[1]: distances between all particles in the molecule.

    Output: current potential of the chemical bond.
    """
    
    bond_type = bond_info[0]
    i, j = bond_info[1], bond_info[2]
    dist = dvs[1][i, j]
    if(bond_type == 0):
        return _pot_har(bond_info[3], bond_info[4], dist)
    else:
        return _pot_mor(bond_info[3], bond_info[5], bond_info[6], dist)

@njit
def bond_forces(bond_info, dvs):
    """Method to calculate the forces generated by a chemical bond.
    
    Input:
    bond_info: an entry from phys_world.molecule_types.bonds
               (bond_type, index of par1, index of par2, EqnLen r_0, Bond k,
                Morse D, Morse rho) (bond_type = 0 (harmonic) or 1 (Morse))
    dvs: a tuple:
         dvs[0]: distance vectors for the molecule.
         dvs[1]: distances between all particles in the molecule.

    Output: tuple (force on par1, force on par2).
    """
    
    bond_type = bond_info[0]
    i, j = bond_info[1], bond_info[2]
    dist = dvs[1][i, j]
    dv_std = dvs[0][i, j] / dist
    if(bond_type == 0):
        return _forces_har(bond_info[3], bond_info[4], dist, dv_std)
    else:
        return _forces_mor(bond_info[3], bond_info[5], bond_info[6], dist, dv_std)

@njit
def _pot_har(r_0, k, dist):
    return k * (dist - r_0) ** 2

@njit
def _pot_mor(r_0, D, rho, dist):
    return D * (1 - math.exp(-rho * (dist - r_0))) ** 2

@njit
def _forces_har(r_0, k, dist, dv_std):
    force = -2. * k * (dist - r_0) * dv_std
    return force, -force

@njit
def _forces_mor(r_0, D, rho, dist, dv_std):
    expon = math.exp(-rho * (dist - r_0))
    force = -2. * D * (1 - expon) * rho * expon * dv_std
    return force, -force
